#version 460 core

in vec2 texCoordsPass;
in vec3 surfaceNormal;
in vec3 toLightVector;
in vec3 toCameraVector;

out vec4 out_Color;

uniform sampler2D textureSampler;
uniform vec3 lightColor;
uniform float shineDamper;
uniform float reflectivity;

void main(void)
{
	vec3 unitNormal = normalize(surfaceNormal);
	vec3 unitToLightVector = normalize(toLightVector);

	float nDot = dot(unitNormal, unitToLightVector);
	float brightness = max(nDot, 0.0);
	vec3 diffuse = brightness * lightColor;

	vec3 unityCameraVector = normalize(toCameraVector);
	vec3 lightDir = -unitToLightVector;

	vec3 reflectDir = reflect(lightDir, unitNormal);

	float specularFactor = dot(reflectDir, unityCameraVector);
	specularFactor = max(specularFactor, 0.0);
	float damping = pow(specularFactor, shineDamper) * reflectivity;
	vec3 finalSpecular = damping * lightColor;

	out_Color = vec4(diffuse,1.0) * texture(textureSampler, texCoordsPass)+ vec4(finalSpecular, 1.0);
}